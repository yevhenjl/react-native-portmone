///
/// StyleOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::hfportmone {

  /**
   * A struct which can be represented as a JavaScript object (StyleOptions).
   */
  struct StyleOptions {
  public:
    std::optional<std::string> titleFontName     SWIFT_PRIVATE;
    std::optional<std::string> titleColor     SWIFT_PRIVATE;
    std::optional<std::string> titleBackgroundColor     SWIFT_PRIVATE;
    std::optional<std::string> headersFontName     SWIFT_PRIVATE;
    std::optional<std::string> headersColor     SWIFT_PRIVATE;
    std::optional<std::string> headersBackgroundColor     SWIFT_PRIVATE;
    std::optional<std::string> placeholdersFontName     SWIFT_PRIVATE;
    std::optional<std::string> placeholdersColor     SWIFT_PRIVATE;
    std::optional<std::string> textsFontName     SWIFT_PRIVATE;
    std::optional<std::string> textsColor     SWIFT_PRIVATE;
    std::optional<std::string> errorsFontName     SWIFT_PRIVATE;
    std::optional<std::string> errorsColor     SWIFT_PRIVATE;
    std::optional<std::string> backgroundColor     SWIFT_PRIVATE;
    std::optional<std::string> resultMessageFontName     SWIFT_PRIVATE;
    std::optional<std::string> resultMessageColor     SWIFT_PRIVATE;
    std::optional<std::string> resultSaveReceiptColor     SWIFT_PRIVATE;
    std::optional<std::string> infoTextsFont     SWIFT_PRIVATE;
    std::optional<std::string> infoTextsColor     SWIFT_PRIVATE;
    std::optional<std::string> buttonTitleFontName     SWIFT_PRIVATE;
    std::optional<std::string> buttonTitleColor     SWIFT_PRIVATE;
    std::optional<std::string> buttonColor     SWIFT_PRIVATE;
    std::optional<double> buttonCornerRadius     SWIFT_PRIVATE;
    std::optional<std::string> biometricButtonColor     SWIFT_PRIVATE;
    std::optional<std::string> successResultImage     SWIFT_PRIVATE;
    std::optional<std::string> failureResultImage     SWIFT_PRIVATE;

  public:
    StyleOptions() = default;
    explicit StyleOptions(std::optional<std::string> titleFontName, std::optional<std::string> titleColor, std::optional<std::string> titleBackgroundColor, std::optional<std::string> headersFontName, std::optional<std::string> headersColor, std::optional<std::string> headersBackgroundColor, std::optional<std::string> placeholdersFontName, std::optional<std::string> placeholdersColor, std::optional<std::string> textsFontName, std::optional<std::string> textsColor, std::optional<std::string> errorsFontName, std::optional<std::string> errorsColor, std::optional<std::string> backgroundColor, std::optional<std::string> resultMessageFontName, std::optional<std::string> resultMessageColor, std::optional<std::string> resultSaveReceiptColor, std::optional<std::string> infoTextsFont, std::optional<std::string> infoTextsColor, std::optional<std::string> buttonTitleFontName, std::optional<std::string> buttonTitleColor, std::optional<std::string> buttonColor, std::optional<double> buttonCornerRadius, std::optional<std::string> biometricButtonColor, std::optional<std::string> successResultImage, std::optional<std::string> failureResultImage): titleFontName(titleFontName), titleColor(titleColor), titleBackgroundColor(titleBackgroundColor), headersFontName(headersFontName), headersColor(headersColor), headersBackgroundColor(headersBackgroundColor), placeholdersFontName(placeholdersFontName), placeholdersColor(placeholdersColor), textsFontName(textsFontName), textsColor(textsColor), errorsFontName(errorsFontName), errorsColor(errorsColor), backgroundColor(backgroundColor), resultMessageFontName(resultMessageFontName), resultMessageColor(resultMessageColor), resultSaveReceiptColor(resultSaveReceiptColor), infoTextsFont(infoTextsFont), infoTextsColor(infoTextsColor), buttonTitleFontName(buttonTitleFontName), buttonTitleColor(buttonTitleColor), buttonColor(buttonColor), buttonCornerRadius(buttonCornerRadius), biometricButtonColor(biometricButtonColor), successResultImage(successResultImage), failureResultImage(failureResultImage) {}
  };

} // namespace margelo::nitro::hfportmone

namespace margelo::nitro {

  using namespace margelo::nitro::hfportmone;

  // C++ StyleOptions <> JS StyleOptions (object)
  template <>
  struct JSIConverter<StyleOptions> final {
    static inline StyleOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return StyleOptions(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "titleFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "titleColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "titleBackgroundColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headersFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headersColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headersBackgroundColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "placeholdersFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "placeholdersColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "textsFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "textsColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "errorsFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "errorsColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "backgroundColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "resultMessageFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "resultMessageColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "resultSaveReceiptColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "infoTextsFont")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "infoTextsColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "buttonTitleFontName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "buttonTitleColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "buttonColor")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "buttonCornerRadius")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "biometricButtonColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "successResultImage")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "failureResultImage"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const StyleOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "titleFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.titleFontName));
      obj.setProperty(runtime, "titleColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.titleColor));
      obj.setProperty(runtime, "titleBackgroundColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.titleBackgroundColor));
      obj.setProperty(runtime, "headersFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.headersFontName));
      obj.setProperty(runtime, "headersColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.headersColor));
      obj.setProperty(runtime, "headersBackgroundColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.headersBackgroundColor));
      obj.setProperty(runtime, "placeholdersFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.placeholdersFontName));
      obj.setProperty(runtime, "placeholdersColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.placeholdersColor));
      obj.setProperty(runtime, "textsFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.textsFontName));
      obj.setProperty(runtime, "textsColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.textsColor));
      obj.setProperty(runtime, "errorsFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.errorsFontName));
      obj.setProperty(runtime, "errorsColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.errorsColor));
      obj.setProperty(runtime, "backgroundColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.backgroundColor));
      obj.setProperty(runtime, "resultMessageFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.resultMessageFontName));
      obj.setProperty(runtime, "resultMessageColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.resultMessageColor));
      obj.setProperty(runtime, "resultSaveReceiptColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.resultSaveReceiptColor));
      obj.setProperty(runtime, "infoTextsFont", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.infoTextsFont));
      obj.setProperty(runtime, "infoTextsColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.infoTextsColor));
      obj.setProperty(runtime, "buttonTitleFontName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.buttonTitleFontName));
      obj.setProperty(runtime, "buttonTitleColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.buttonTitleColor));
      obj.setProperty(runtime, "buttonColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.buttonColor));
      obj.setProperty(runtime, "buttonCornerRadius", JSIConverter<std::optional<double>>::toJSI(runtime, arg.buttonCornerRadius));
      obj.setProperty(runtime, "biometricButtonColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.biometricButtonColor));
      obj.setProperty(runtime, "successResultImage", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.successResultImage));
      obj.setProperty(runtime, "failureResultImage", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.failureResultImage));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "titleFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "titleColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "titleBackgroundColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "headersFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "headersColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "headersBackgroundColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "placeholdersFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "placeholdersColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "textsFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "textsColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "errorsFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "errorsColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "backgroundColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "resultMessageFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "resultMessageColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "resultSaveReceiptColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "infoTextsFont"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "infoTextsColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "buttonTitleFontName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "buttonTitleColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "buttonColor"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "buttonCornerRadius"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "biometricButtonColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "successResultImage"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "failureResultImage"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
