///
/// PaymentResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::hfportmone {

  /**
   * A struct which can be represented as a JavaScript object (PaymentResult).
   */
  struct PaymentResult {
  public:
    std::optional<std::string> billId     SWIFT_PRIVATE;
    std::string status     SWIFT_PRIVATE;
    double billAmount     SWIFT_PRIVATE;
    std::optional<std::string> cardMask     SWIFT_PRIVATE;
    double commissionAmount     SWIFT_PRIVATE;
    std::optional<std::string> receiptUrl     SWIFT_PRIVATE;
    std::optional<std::string> contractNumber     SWIFT_PRIVATE;
    std::optional<double> payDate     SWIFT_PRIVATE;
    std::optional<std::string> payeeName     SWIFT_PRIVATE;
    std::optional<std::string> token     SWIFT_PRIVATE;

  public:
    PaymentResult() = default;
    explicit PaymentResult(std::optional<std::string> billId, std::string status, double billAmount, std::optional<std::string> cardMask, double commissionAmount, std::optional<std::string> receiptUrl, std::optional<std::string> contractNumber, std::optional<double> payDate, std::optional<std::string> payeeName, std::optional<std::string> token): billId(billId), status(status), billAmount(billAmount), cardMask(cardMask), commissionAmount(commissionAmount), receiptUrl(receiptUrl), contractNumber(contractNumber), payDate(payDate), payeeName(payeeName), token(token) {}
  };

} // namespace margelo::nitro::hfportmone

namespace margelo::nitro {

  using namespace margelo::nitro::hfportmone;

  // C++ PaymentResult <> JS PaymentResult (object)
  template <>
  struct JSIConverter<PaymentResult> final {
    static inline PaymentResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return PaymentResult(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "billId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "status")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "billAmount")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cardMask")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "commissionAmount")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "receiptUrl")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "contractNumber")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "payDate")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "payeeName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "token"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const PaymentResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "billId", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.billId));
      obj.setProperty(runtime, "status", JSIConverter<std::string>::toJSI(runtime, arg.status));
      obj.setProperty(runtime, "billAmount", JSIConverter<double>::toJSI(runtime, arg.billAmount));
      obj.setProperty(runtime, "cardMask", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cardMask));
      obj.setProperty(runtime, "commissionAmount", JSIConverter<double>::toJSI(runtime, arg.commissionAmount));
      obj.setProperty(runtime, "receiptUrl", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.receiptUrl));
      obj.setProperty(runtime, "contractNumber", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.contractNumber));
      obj.setProperty(runtime, "payDate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.payDate));
      obj.setProperty(runtime, "payeeName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.payeeName));
      obj.setProperty(runtime, "token", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.token));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "billId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "status"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "billAmount"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cardMask"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "commissionAmount"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "receiptUrl"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "contractNumber"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "payDate"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "payeeName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "token"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
