///
/// HybridHfPortmoneSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `StyleOptions` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct StyleOptions; }
// Forward declaration of `Language` to properly resolve imports.
namespace margelo::nitro::hfportmone { enum class Language; }
// Forward declaration of `PaymentResult` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentResult; }
// Forward declaration of `PaymentParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentParams; }
// Forward declaration of `TokenPaymentParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct TokenPaymentParams; }
// Forward declaration of `PreauthParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PreauthParams; }

#include <optional>
#include "StyleOptions.hpp"
#include "Language.hpp"
#include <NitroModules/Promise.hpp>
#include "PaymentResult.hpp"
#include "PaymentParams.hpp"
#include "TokenPaymentParams.hpp"
#include "PreauthParams.hpp"

namespace margelo::nitro::hfportmone {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `HfPortmone`
   * Inherit this class to create instances of `HybridHfPortmoneSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridHfPortmone: public HybridHfPortmoneSpec {
   * public:
   *   HybridHfPortmone(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridHfPortmoneSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridHfPortmoneSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridHfPortmoneSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void initialize(const std::optional<StyleOptions>& styleOptions, std::optional<Language> language) = 0;
      virtual void setTimeout(double timeoutMs) = 0;
      virtual std::shared_ptr<Promise<PaymentResult>> payByCard(const PaymentParams& params, std::optional<bool> showReceiptScreen) = 0;
      virtual std::shared_ptr<Promise<PaymentResult>> payByToken(const PaymentParams& payParams, const TokenPaymentParams& tokenParams, std::optional<bool> showReceiptScreen) = 0;
      virtual std::shared_ptr<Promise<PaymentResult>> saveCard(const PreauthParams& params) = 0;
      virtual void setReturnToDetailsDisabled(bool disabled) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "HfPortmone";
  };

} // namespace margelo::nitro::hfportmone
