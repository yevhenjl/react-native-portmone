///
/// PaymentParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `PaymentFlowType` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentFlowType; }

#include <optional>
#include <string>
#include "PaymentFlowType.hpp"

namespace margelo::nitro::hfportmone {

  /**
   * A struct which can be represented as a JavaScript object (PaymentParams).
   */
  struct PaymentParams {
  public:
    std::optional<std::string> description     SWIFT_PRIVATE;
    std::optional<std::string> attribute1     SWIFT_PRIVATE;
    std::optional<std::string> attribute2     SWIFT_PRIVATE;
    std::optional<std::string> attribute3     SWIFT_PRIVATE;
    std::optional<std::string> attribute4     SWIFT_PRIVATE;
    std::optional<std::string> attribute5     SWIFT_PRIVATE;
    std::optional<std::string> billNumber     SWIFT_PRIVATE;
    std::optional<bool> preauthFlag     SWIFT_PRIVATE;
    std::optional<std::string> billCurrency     SWIFT_PRIVATE;
    double billAmount     SWIFT_PRIVATE;
    std::optional<double> billAmountWcvv     SWIFT_PRIVATE;
    std::string payeeId     SWIFT_PRIVATE;
    std::optional<std::string> type     SWIFT_PRIVATE;
    std::optional<std::string> merchantIdentifier     SWIFT_PRIVATE;
    std::optional<PaymentFlowType> paymentFlowType     SWIFT_PRIVATE;

  public:
    PaymentParams() = default;
    explicit PaymentParams(std::optional<std::string> description, std::optional<std::string> attribute1, std::optional<std::string> attribute2, std::optional<std::string> attribute3, std::optional<std::string> attribute4, std::optional<std::string> attribute5, std::optional<std::string> billNumber, std::optional<bool> preauthFlag, std::optional<std::string> billCurrency, double billAmount, std::optional<double> billAmountWcvv, std::string payeeId, std::optional<std::string> type, std::optional<std::string> merchantIdentifier, std::optional<PaymentFlowType> paymentFlowType): description(description), attribute1(attribute1), attribute2(attribute2), attribute3(attribute3), attribute4(attribute4), attribute5(attribute5), billNumber(billNumber), preauthFlag(preauthFlag), billCurrency(billCurrency), billAmount(billAmount), billAmountWcvv(billAmountWcvv), payeeId(payeeId), type(type), merchantIdentifier(merchantIdentifier), paymentFlowType(paymentFlowType) {}
  };

} // namespace margelo::nitro::hfportmone

namespace margelo::nitro {

  using namespace margelo::nitro::hfportmone;

  // C++ PaymentParams <> JS PaymentParams (object)
  template <>
  struct JSIConverter<PaymentParams> final {
    static inline PaymentParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return PaymentParams(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "description")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "attribute1")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "attribute2")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "attribute3")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "attribute4")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "attribute5")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "billNumber")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "preauthFlag")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "billCurrency")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "billAmount")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "billAmountWcvv")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "payeeId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "merchantIdentifier")),
        JSIConverter<std::optional<PaymentFlowType>>::fromJSI(runtime, obj.getProperty(runtime, "paymentFlowType"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const PaymentParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "description", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.description));
      obj.setProperty(runtime, "attribute1", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.attribute1));
      obj.setProperty(runtime, "attribute2", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.attribute2));
      obj.setProperty(runtime, "attribute3", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.attribute3));
      obj.setProperty(runtime, "attribute4", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.attribute4));
      obj.setProperty(runtime, "attribute5", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.attribute5));
      obj.setProperty(runtime, "billNumber", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.billNumber));
      obj.setProperty(runtime, "preauthFlag", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.preauthFlag));
      obj.setProperty(runtime, "billCurrency", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.billCurrency));
      obj.setProperty(runtime, "billAmount", JSIConverter<double>::toJSI(runtime, arg.billAmount));
      obj.setProperty(runtime, "billAmountWcvv", JSIConverter<std::optional<double>>::toJSI(runtime, arg.billAmountWcvv));
      obj.setProperty(runtime, "payeeId", JSIConverter<std::string>::toJSI(runtime, arg.payeeId));
      obj.setProperty(runtime, "type", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "merchantIdentifier", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.merchantIdentifier));
      obj.setProperty(runtime, "paymentFlowType", JSIConverter<std::optional<PaymentFlowType>>::toJSI(runtime, arg.paymentFlowType));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "description"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "attribute1"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "attribute2"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "attribute3"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "attribute4"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "attribute5"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "billNumber"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "preauthFlag"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "billCurrency"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "billAmount"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "billAmountWcvv"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "payeeId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "merchantIdentifier"))) return false;
      if (!JSIConverter<std::optional<PaymentFlowType>>::canConvert(runtime, obj.getProperty(runtime, "paymentFlowType"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
