///
/// PreauthParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::hfportmone {

  /**
   * A struct which can be represented as a JavaScript object (PreauthParams).
   */
  struct PreauthParams {
  public:
    std::string payeeId     SWIFT_PRIVATE;
    std::optional<std::string> accountId     SWIFT_PRIVATE;
    std::string description     SWIFT_PRIVATE;
    std::optional<std::string> billNumber     SWIFT_PRIVATE;

  public:
    PreauthParams() = default;
    explicit PreauthParams(std::string payeeId, std::optional<std::string> accountId, std::string description, std::optional<std::string> billNumber): payeeId(payeeId), accountId(accountId), description(description), billNumber(billNumber) {}
  };

} // namespace margelo::nitro::hfportmone

namespace margelo::nitro {

  using namespace margelo::nitro::hfportmone;

  // C++ PreauthParams <> JS PreauthParams (object)
  template <>
  struct JSIConverter<PreauthParams> final {
    static inline PreauthParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return PreauthParams(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "payeeId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "accountId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "description")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "billNumber"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const PreauthParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "payeeId", JSIConverter<std::string>::toJSI(runtime, arg.payeeId));
      obj.setProperty(runtime, "accountId", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.accountId));
      obj.setProperty(runtime, "description", JSIConverter<std::string>::toJSI(runtime, arg.description));
      obj.setProperty(runtime, "billNumber", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.billNumber));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "payeeId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "accountId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "description"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "billNumber"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
