///
/// JStyleOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "StyleOptions.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::hfportmone {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "StyleOptions" and the the Kotlin data class "StyleOptions".
   */
  struct JStyleOptions final: public jni::JavaClass<JStyleOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/hfportmone/StyleOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct StyleOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    StyleOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldTitleFontName = clazz->getField<jni::JString>("titleFontName");
      jni::local_ref<jni::JString> titleFontName = this->getFieldValue(fieldTitleFontName);
      static const auto fieldTitleColor = clazz->getField<jni::JString>("titleColor");
      jni::local_ref<jni::JString> titleColor = this->getFieldValue(fieldTitleColor);
      static const auto fieldTitleBackgroundColor = clazz->getField<jni::JString>("titleBackgroundColor");
      jni::local_ref<jni::JString> titleBackgroundColor = this->getFieldValue(fieldTitleBackgroundColor);
      static const auto fieldHeadersFontName = clazz->getField<jni::JString>("headersFontName");
      jni::local_ref<jni::JString> headersFontName = this->getFieldValue(fieldHeadersFontName);
      static const auto fieldHeadersColor = clazz->getField<jni::JString>("headersColor");
      jni::local_ref<jni::JString> headersColor = this->getFieldValue(fieldHeadersColor);
      static const auto fieldHeadersBackgroundColor = clazz->getField<jni::JString>("headersBackgroundColor");
      jni::local_ref<jni::JString> headersBackgroundColor = this->getFieldValue(fieldHeadersBackgroundColor);
      static const auto fieldPlaceholdersFontName = clazz->getField<jni::JString>("placeholdersFontName");
      jni::local_ref<jni::JString> placeholdersFontName = this->getFieldValue(fieldPlaceholdersFontName);
      static const auto fieldPlaceholdersColor = clazz->getField<jni::JString>("placeholdersColor");
      jni::local_ref<jni::JString> placeholdersColor = this->getFieldValue(fieldPlaceholdersColor);
      static const auto fieldTextsFontName = clazz->getField<jni::JString>("textsFontName");
      jni::local_ref<jni::JString> textsFontName = this->getFieldValue(fieldTextsFontName);
      static const auto fieldTextsColor = clazz->getField<jni::JString>("textsColor");
      jni::local_ref<jni::JString> textsColor = this->getFieldValue(fieldTextsColor);
      static const auto fieldErrorsFontName = clazz->getField<jni::JString>("errorsFontName");
      jni::local_ref<jni::JString> errorsFontName = this->getFieldValue(fieldErrorsFontName);
      static const auto fieldErrorsColor = clazz->getField<jni::JString>("errorsColor");
      jni::local_ref<jni::JString> errorsColor = this->getFieldValue(fieldErrorsColor);
      static const auto fieldBackgroundColor = clazz->getField<jni::JString>("backgroundColor");
      jni::local_ref<jni::JString> backgroundColor = this->getFieldValue(fieldBackgroundColor);
      static const auto fieldResultMessageFontName = clazz->getField<jni::JString>("resultMessageFontName");
      jni::local_ref<jni::JString> resultMessageFontName = this->getFieldValue(fieldResultMessageFontName);
      static const auto fieldResultMessageColor = clazz->getField<jni::JString>("resultMessageColor");
      jni::local_ref<jni::JString> resultMessageColor = this->getFieldValue(fieldResultMessageColor);
      static const auto fieldResultSaveReceiptColor = clazz->getField<jni::JString>("resultSaveReceiptColor");
      jni::local_ref<jni::JString> resultSaveReceiptColor = this->getFieldValue(fieldResultSaveReceiptColor);
      static const auto fieldInfoTextsFont = clazz->getField<jni::JString>("infoTextsFont");
      jni::local_ref<jni::JString> infoTextsFont = this->getFieldValue(fieldInfoTextsFont);
      static const auto fieldInfoTextsColor = clazz->getField<jni::JString>("infoTextsColor");
      jni::local_ref<jni::JString> infoTextsColor = this->getFieldValue(fieldInfoTextsColor);
      static const auto fieldButtonTitleFontName = clazz->getField<jni::JString>("buttonTitleFontName");
      jni::local_ref<jni::JString> buttonTitleFontName = this->getFieldValue(fieldButtonTitleFontName);
      static const auto fieldButtonTitleColor = clazz->getField<jni::JString>("buttonTitleColor");
      jni::local_ref<jni::JString> buttonTitleColor = this->getFieldValue(fieldButtonTitleColor);
      static const auto fieldButtonColor = clazz->getField<jni::JString>("buttonColor");
      jni::local_ref<jni::JString> buttonColor = this->getFieldValue(fieldButtonColor);
      static const auto fieldButtonCornerRadius = clazz->getField<jni::JDouble>("buttonCornerRadius");
      jni::local_ref<jni::JDouble> buttonCornerRadius = this->getFieldValue(fieldButtonCornerRadius);
      static const auto fieldBiometricButtonColor = clazz->getField<jni::JString>("biometricButtonColor");
      jni::local_ref<jni::JString> biometricButtonColor = this->getFieldValue(fieldBiometricButtonColor);
      static const auto fieldSuccessResultImage = clazz->getField<jni::JString>("successResultImage");
      jni::local_ref<jni::JString> successResultImage = this->getFieldValue(fieldSuccessResultImage);
      static const auto fieldFailureResultImage = clazz->getField<jni::JString>("failureResultImage");
      jni::local_ref<jni::JString> failureResultImage = this->getFieldValue(fieldFailureResultImage);
      return StyleOptions(
        titleFontName != nullptr ? std::make_optional(titleFontName->toStdString()) : std::nullopt,
        titleColor != nullptr ? std::make_optional(titleColor->toStdString()) : std::nullopt,
        titleBackgroundColor != nullptr ? std::make_optional(titleBackgroundColor->toStdString()) : std::nullopt,
        headersFontName != nullptr ? std::make_optional(headersFontName->toStdString()) : std::nullopt,
        headersColor != nullptr ? std::make_optional(headersColor->toStdString()) : std::nullopt,
        headersBackgroundColor != nullptr ? std::make_optional(headersBackgroundColor->toStdString()) : std::nullopt,
        placeholdersFontName != nullptr ? std::make_optional(placeholdersFontName->toStdString()) : std::nullopt,
        placeholdersColor != nullptr ? std::make_optional(placeholdersColor->toStdString()) : std::nullopt,
        textsFontName != nullptr ? std::make_optional(textsFontName->toStdString()) : std::nullopt,
        textsColor != nullptr ? std::make_optional(textsColor->toStdString()) : std::nullopt,
        errorsFontName != nullptr ? std::make_optional(errorsFontName->toStdString()) : std::nullopt,
        errorsColor != nullptr ? std::make_optional(errorsColor->toStdString()) : std::nullopt,
        backgroundColor != nullptr ? std::make_optional(backgroundColor->toStdString()) : std::nullopt,
        resultMessageFontName != nullptr ? std::make_optional(resultMessageFontName->toStdString()) : std::nullopt,
        resultMessageColor != nullptr ? std::make_optional(resultMessageColor->toStdString()) : std::nullopt,
        resultSaveReceiptColor != nullptr ? std::make_optional(resultSaveReceiptColor->toStdString()) : std::nullopt,
        infoTextsFont != nullptr ? std::make_optional(infoTextsFont->toStdString()) : std::nullopt,
        infoTextsColor != nullptr ? std::make_optional(infoTextsColor->toStdString()) : std::nullopt,
        buttonTitleFontName != nullptr ? std::make_optional(buttonTitleFontName->toStdString()) : std::nullopt,
        buttonTitleColor != nullptr ? std::make_optional(buttonTitleColor->toStdString()) : std::nullopt,
        buttonColor != nullptr ? std::make_optional(buttonColor->toStdString()) : std::nullopt,
        buttonCornerRadius != nullptr ? std::make_optional(buttonCornerRadius->value()) : std::nullopt,
        biometricButtonColor != nullptr ? std::make_optional(biometricButtonColor->toStdString()) : std::nullopt,
        successResultImage != nullptr ? std::make_optional(successResultImage->toStdString()) : std::nullopt,
        failureResultImage != nullptr ? std::make_optional(failureResultImage->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JStyleOptions::javaobject> fromCpp(const StyleOptions& value) {
      return newInstance(
        value.titleFontName.has_value() ? jni::make_jstring(value.titleFontName.value()) : nullptr,
        value.titleColor.has_value() ? jni::make_jstring(value.titleColor.value()) : nullptr,
        value.titleBackgroundColor.has_value() ? jni::make_jstring(value.titleBackgroundColor.value()) : nullptr,
        value.headersFontName.has_value() ? jni::make_jstring(value.headersFontName.value()) : nullptr,
        value.headersColor.has_value() ? jni::make_jstring(value.headersColor.value()) : nullptr,
        value.headersBackgroundColor.has_value() ? jni::make_jstring(value.headersBackgroundColor.value()) : nullptr,
        value.placeholdersFontName.has_value() ? jni::make_jstring(value.placeholdersFontName.value()) : nullptr,
        value.placeholdersColor.has_value() ? jni::make_jstring(value.placeholdersColor.value()) : nullptr,
        value.textsFontName.has_value() ? jni::make_jstring(value.textsFontName.value()) : nullptr,
        value.textsColor.has_value() ? jni::make_jstring(value.textsColor.value()) : nullptr,
        value.errorsFontName.has_value() ? jni::make_jstring(value.errorsFontName.value()) : nullptr,
        value.errorsColor.has_value() ? jni::make_jstring(value.errorsColor.value()) : nullptr,
        value.backgroundColor.has_value() ? jni::make_jstring(value.backgroundColor.value()) : nullptr,
        value.resultMessageFontName.has_value() ? jni::make_jstring(value.resultMessageFontName.value()) : nullptr,
        value.resultMessageColor.has_value() ? jni::make_jstring(value.resultMessageColor.value()) : nullptr,
        value.resultSaveReceiptColor.has_value() ? jni::make_jstring(value.resultSaveReceiptColor.value()) : nullptr,
        value.infoTextsFont.has_value() ? jni::make_jstring(value.infoTextsFont.value()) : nullptr,
        value.infoTextsColor.has_value() ? jni::make_jstring(value.infoTextsColor.value()) : nullptr,
        value.buttonTitleFontName.has_value() ? jni::make_jstring(value.buttonTitleFontName.value()) : nullptr,
        value.buttonTitleColor.has_value() ? jni::make_jstring(value.buttonTitleColor.value()) : nullptr,
        value.buttonColor.has_value() ? jni::make_jstring(value.buttonColor.value()) : nullptr,
        value.buttonCornerRadius.has_value() ? jni::JDouble::valueOf(value.buttonCornerRadius.value()) : nullptr,
        value.biometricButtonColor.has_value() ? jni::make_jstring(value.biometricButtonColor.value()) : nullptr,
        value.successResultImage.has_value() ? jni::make_jstring(value.successResultImage.value()) : nullptr,
        value.failureResultImage.has_value() ? jni::make_jstring(value.failureResultImage.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::hfportmone
