///
/// JHybridHfPortmoneSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridHfPortmoneSpec.hpp"

// Forward declaration of `PaymentResult` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentResult; }
// Forward declaration of `StyleOptions` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct StyleOptions; }
// Forward declaration of `Language` to properly resolve imports.
namespace margelo::nitro::hfportmone { enum class Language; }
// Forward declaration of `PaymentParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentParams; }
// Forward declaration of `PaymentFlowType` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentFlowType; }
// Forward declaration of `TokenPaymentParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct TokenPaymentParams; }
// Forward declaration of `PreauthParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PreauthParams; }

#include <NitroModules/Promise.hpp>
#include "PaymentResult.hpp"
#include <NitroModules/JPromise.hpp>
#include "JPaymentResult.hpp"
#include <optional>
#include <string>
#include "StyleOptions.hpp"
#include "JStyleOptions.hpp"
#include "Language.hpp"
#include "JLanguage.hpp"
#include "PaymentParams.hpp"
#include "JPaymentParams.hpp"
#include "PaymentFlowType.hpp"
#include "JPaymentFlowType.hpp"
#include "TokenPaymentParams.hpp"
#include "JTokenPaymentParams.hpp"
#include "PreauthParams.hpp"
#include "JPreauthParams.hpp"

namespace margelo::nitro::hfportmone {

  jni::local_ref<JHybridHfPortmoneSpec::jhybriddata> JHybridHfPortmoneSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridHfPortmoneSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridHfPortmoneSpec::initHybrid),
    });
  }

  size_t JHybridHfPortmoneSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridHfPortmoneSpec::initialize(const std::optional<StyleOptions>& styleOptions, std::optional<Language> language) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JStyleOptions> /* styleOptions */, jni::alias_ref<JLanguage> /* language */)>("initialize");
    method(_javaPart, styleOptions.has_value() ? JStyleOptions::fromCpp(styleOptions.value()) : nullptr, language.has_value() ? JLanguage::fromCpp(language.value()) : nullptr);
  }
  void JHybridHfPortmoneSpec::setTimeout(double timeoutMs) {
    static const auto method = javaClassStatic()->getMethod<void(double /* timeoutMs */)>("setTimeout");
    method(_javaPart, timeoutMs);
  }
  std::shared_ptr<Promise<PaymentResult>> JHybridHfPortmoneSpec::payByCard(const PaymentParams& params, std::optional<bool> showReceiptScreen) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JPaymentParams> /* params */, jni::alias_ref<jni::JBoolean> /* showReceiptScreen */)>("payByCard");
    auto __result = method(_javaPart, JPaymentParams::fromCpp(params), showReceiptScreen.has_value() ? jni::JBoolean::valueOf(showReceiptScreen.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<PaymentResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JPaymentResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<PaymentResult>> JHybridHfPortmoneSpec::payByToken(const PaymentParams& payParams, const TokenPaymentParams& tokenParams, std::optional<bool> showReceiptScreen) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JPaymentParams> /* payParams */, jni::alias_ref<JTokenPaymentParams> /* tokenParams */, jni::alias_ref<jni::JBoolean> /* showReceiptScreen */)>("payByToken");
    auto __result = method(_javaPart, JPaymentParams::fromCpp(payParams), JTokenPaymentParams::fromCpp(tokenParams), showReceiptScreen.has_value() ? jni::JBoolean::valueOf(showReceiptScreen.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<PaymentResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JPaymentResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<PaymentResult>> JHybridHfPortmoneSpec::saveCard(const PreauthParams& params) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JPreauthParams> /* params */)>("saveCard");
    auto __result = method(_javaPart, JPreauthParams::fromCpp(params));
    return [&]() {
      auto __promise = Promise<PaymentResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JPaymentResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridHfPortmoneSpec::setReturnToDetailsDisabled(bool disabled) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* disabled */)>("setReturnToDetailsDisabled");
    method(_javaPart, disabled);
  }

} // namespace margelo::nitro::hfportmone
