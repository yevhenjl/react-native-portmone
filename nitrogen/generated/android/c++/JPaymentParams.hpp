///
/// JPaymentParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PaymentParams.hpp"

#include "JPaymentFlowType.hpp"
#include "PaymentFlowType.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::hfportmone {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "PaymentParams" and the the Kotlin data class "PaymentParams".
   */
  struct JPaymentParams final: public jni::JavaClass<JPaymentParams> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/hfportmone/PaymentParams;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct PaymentParams by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PaymentParams toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldDescription = clazz->getField<jni::JString>("description");
      jni::local_ref<jni::JString> description = this->getFieldValue(fieldDescription);
      static const auto fieldAttribute1 = clazz->getField<jni::JString>("attribute1");
      jni::local_ref<jni::JString> attribute1 = this->getFieldValue(fieldAttribute1);
      static const auto fieldAttribute2 = clazz->getField<jni::JString>("attribute2");
      jni::local_ref<jni::JString> attribute2 = this->getFieldValue(fieldAttribute2);
      static const auto fieldAttribute3 = clazz->getField<jni::JString>("attribute3");
      jni::local_ref<jni::JString> attribute3 = this->getFieldValue(fieldAttribute3);
      static const auto fieldAttribute4 = clazz->getField<jni::JString>("attribute4");
      jni::local_ref<jni::JString> attribute4 = this->getFieldValue(fieldAttribute4);
      static const auto fieldAttribute5 = clazz->getField<jni::JString>("attribute5");
      jni::local_ref<jni::JString> attribute5 = this->getFieldValue(fieldAttribute5);
      static const auto fieldBillNumber = clazz->getField<jni::JString>("billNumber");
      jni::local_ref<jni::JString> billNumber = this->getFieldValue(fieldBillNumber);
      static const auto fieldPreauthFlag = clazz->getField<jni::JBoolean>("preauthFlag");
      jni::local_ref<jni::JBoolean> preauthFlag = this->getFieldValue(fieldPreauthFlag);
      static const auto fieldBillCurrency = clazz->getField<jni::JString>("billCurrency");
      jni::local_ref<jni::JString> billCurrency = this->getFieldValue(fieldBillCurrency);
      static const auto fieldBillAmount = clazz->getField<double>("billAmount");
      double billAmount = this->getFieldValue(fieldBillAmount);
      static const auto fieldBillAmountWcvv = clazz->getField<jni::JDouble>("billAmountWcvv");
      jni::local_ref<jni::JDouble> billAmountWcvv = this->getFieldValue(fieldBillAmountWcvv);
      static const auto fieldPayeeId = clazz->getField<jni::JString>("payeeId");
      jni::local_ref<jni::JString> payeeId = this->getFieldValue(fieldPayeeId);
      static const auto fieldType = clazz->getField<jni::JString>("type");
      jni::local_ref<jni::JString> type = this->getFieldValue(fieldType);
      static const auto fieldMerchantIdentifier = clazz->getField<jni::JString>("merchantIdentifier");
      jni::local_ref<jni::JString> merchantIdentifier = this->getFieldValue(fieldMerchantIdentifier);
      static const auto fieldPaymentFlowType = clazz->getField<JPaymentFlowType>("paymentFlowType");
      jni::local_ref<JPaymentFlowType> paymentFlowType = this->getFieldValue(fieldPaymentFlowType);
      return PaymentParams(
        description != nullptr ? std::make_optional(description->toStdString()) : std::nullopt,
        attribute1 != nullptr ? std::make_optional(attribute1->toStdString()) : std::nullopt,
        attribute2 != nullptr ? std::make_optional(attribute2->toStdString()) : std::nullopt,
        attribute3 != nullptr ? std::make_optional(attribute3->toStdString()) : std::nullopt,
        attribute4 != nullptr ? std::make_optional(attribute4->toStdString()) : std::nullopt,
        attribute5 != nullptr ? std::make_optional(attribute5->toStdString()) : std::nullopt,
        billNumber != nullptr ? std::make_optional(billNumber->toStdString()) : std::nullopt,
        preauthFlag != nullptr ? std::make_optional(static_cast<bool>(preauthFlag->value())) : std::nullopt,
        billCurrency != nullptr ? std::make_optional(billCurrency->toStdString()) : std::nullopt,
        billAmount,
        billAmountWcvv != nullptr ? std::make_optional(billAmountWcvv->value()) : std::nullopt,
        payeeId->toStdString(),
        type != nullptr ? std::make_optional(type->toStdString()) : std::nullopt,
        merchantIdentifier != nullptr ? std::make_optional(merchantIdentifier->toStdString()) : std::nullopt,
        paymentFlowType != nullptr ? std::make_optional(paymentFlowType->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JPaymentParams::javaobject> fromCpp(const PaymentParams& value) {
      return newInstance(
        value.description.has_value() ? jni::make_jstring(value.description.value()) : nullptr,
        value.attribute1.has_value() ? jni::make_jstring(value.attribute1.value()) : nullptr,
        value.attribute2.has_value() ? jni::make_jstring(value.attribute2.value()) : nullptr,
        value.attribute3.has_value() ? jni::make_jstring(value.attribute3.value()) : nullptr,
        value.attribute4.has_value() ? jni::make_jstring(value.attribute4.value()) : nullptr,
        value.attribute5.has_value() ? jni::make_jstring(value.attribute5.value()) : nullptr,
        value.billNumber.has_value() ? jni::make_jstring(value.billNumber.value()) : nullptr,
        value.preauthFlag.has_value() ? jni::JBoolean::valueOf(value.preauthFlag.value()) : nullptr,
        value.billCurrency.has_value() ? jni::make_jstring(value.billCurrency.value()) : nullptr,
        value.billAmount,
        value.billAmountWcvv.has_value() ? jni::JDouble::valueOf(value.billAmountWcvv.value()) : nullptr,
        jni::make_jstring(value.payeeId),
        value.type.has_value() ? jni::make_jstring(value.type.value()) : nullptr,
        value.merchantIdentifier.has_value() ? jni::make_jstring(value.merchantIdentifier.value()) : nullptr,
        value.paymentFlowType.has_value() ? JPaymentFlowType::fromCpp(value.paymentFlowType.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::hfportmone
