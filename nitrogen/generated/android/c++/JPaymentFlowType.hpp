///
/// JPaymentFlowType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PaymentFlowType.hpp"

#include <optional>

namespace margelo::nitro::hfportmone {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "PaymentFlowType" and the the Kotlin data class "PaymentFlowType".
   */
  struct JPaymentFlowType final: public jni::JavaClass<JPaymentFlowType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/hfportmone/PaymentFlowType;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct PaymentFlowType by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PaymentFlowType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldPayWithCard = clazz->getField<jni::JBoolean>("payWithCard");
      jni::local_ref<jni::JBoolean> payWithCard = this->getFieldValue(fieldPayWithCard);
      static const auto fieldPayWithAppleGPay = clazz->getField<jni::JBoolean>("payWithAppleGPay");
      jni::local_ref<jni::JBoolean> payWithAppleGPay = this->getFieldValue(fieldPayWithAppleGPay);
      static const auto fieldWithoutCVV = clazz->getField<jni::JBoolean>("withoutCVV");
      jni::local_ref<jni::JBoolean> withoutCVV = this->getFieldValue(fieldWithoutCVV);
      return PaymentFlowType(
        payWithCard != nullptr ? std::make_optional(static_cast<bool>(payWithCard->value())) : std::nullopt,
        payWithAppleGPay != nullptr ? std::make_optional(static_cast<bool>(payWithAppleGPay->value())) : std::nullopt,
        withoutCVV != nullptr ? std::make_optional(static_cast<bool>(withoutCVV->value())) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JPaymentFlowType::javaobject> fromCpp(const PaymentFlowType& value) {
      return newInstance(
        value.payWithCard.has_value() ? jni::JBoolean::valueOf(value.payWithCard.value()) : nullptr,
        value.payWithAppleGPay.has_value() ? jni::JBoolean::valueOf(value.payWithAppleGPay.value()) : nullptr,
        value.withoutCVV.has_value() ? jni::JBoolean::valueOf(value.withoutCVV.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::hfportmone
