///
/// HybridHfPortmoneSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridHfPortmoneSpec.hpp"

// Forward declaration of `HybridHfPortmoneSpec_cxx` to properly resolve imports.
namespace NitroHfPortmone { class HybridHfPortmoneSpec_cxx; }

// Forward declaration of `StyleOptions` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct StyleOptions; }
// Forward declaration of `Language` to properly resolve imports.
namespace margelo::nitro::hfportmone { enum class Language; }
// Forward declaration of `PaymentResult` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentResult; }
// Forward declaration of `PaymentParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentParams; }
// Forward declaration of `PaymentFlowType` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentFlowType; }
// Forward declaration of `TokenPaymentParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct TokenPaymentParams; }
// Forward declaration of `PreauthParams` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PreauthParams; }

#include <optional>
#include "StyleOptions.hpp"
#include <string>
#include "Language.hpp"
#include <NitroModules/Promise.hpp>
#include "PaymentResult.hpp"
#include "PaymentParams.hpp"
#include "PaymentFlowType.hpp"
#include "TokenPaymentParams.hpp"
#include "PreauthParams.hpp"

#include "NitroHfPortmone-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::hfportmone {

  /**
   * The C++ part of HybridHfPortmoneSpec_cxx.swift.
   *
   * HybridHfPortmoneSpecSwift (C++) accesses HybridHfPortmoneSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridHfPortmoneSpec_cxx can directly inherit from the C++ class HybridHfPortmoneSpec
   * to simplify the whole structure and memory management.
   */
  class HybridHfPortmoneSpecSwift: public virtual HybridHfPortmoneSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridHfPortmoneSpecSwift(const NitroHfPortmone::HybridHfPortmoneSpec_cxx& swiftPart):
      HybridObject(HybridHfPortmoneSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroHfPortmone::HybridHfPortmoneSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void initialize(const std::optional<StyleOptions>& styleOptions, std::optional<Language> language) override {
      auto __result = _swiftPart.initialize(styleOptions, language);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setTimeout(double timeoutMs) override {
      auto __result = _swiftPart.setTimeout(std::forward<decltype(timeoutMs)>(timeoutMs));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<PaymentResult>> payByCard(const PaymentParams& params, std::optional<bool> showReceiptScreen) override {
      auto __result = _swiftPart.payByCard(params, showReceiptScreen);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<PaymentResult>> payByToken(const PaymentParams& payParams, const TokenPaymentParams& tokenParams, std::optional<bool> showReceiptScreen) override {
      auto __result = _swiftPart.payByToken(payParams, tokenParams, showReceiptScreen);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<PaymentResult>> saveCard(const PreauthParams& params) override {
      auto __result = _swiftPart.saveCard(params);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void setReturnToDetailsDisabled(bool disabled) override {
      auto __result = _swiftPart.setReturnToDetailsDisabled(std::forward<decltype(disabled)>(disabled));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroHfPortmone::HybridHfPortmoneSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::hfportmone
