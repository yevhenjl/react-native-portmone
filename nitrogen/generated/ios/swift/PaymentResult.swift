///
/// PaymentResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PaymentResult`, backed by a C++ struct.
 */
public typealias PaymentResult = margelo.nitro.hfportmone.PaymentResult

public extension PaymentResult {
  private typealias bridge = margelo.nitro.hfportmone.bridge.swift

  /**
   * Create a new instance of `PaymentResult`.
   */
  init(billId: String?, status: String, billAmount: Double, cardMask: String?, commissionAmount: Double, receiptUrl: String?, contractNumber: String?, payDate: Double?, payeeName: String?, token: String?) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = billId {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(status), billAmount, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = cardMask {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), commissionAmount, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = receiptUrl {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = contractNumber {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = payDate {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = payeeName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = token {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var billId: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__billId.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__billId = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var status: String {
    @inline(__always)
    get {
      return String(self.__status)
    }
    @inline(__always)
    set {
      self.__status = std.string(newValue)
    }
  }
  
  var billAmount: Double {
    @inline(__always)
    get {
      return self.__billAmount
    }
    @inline(__always)
    set {
      self.__billAmount = newValue
    }
  }
  
  var cardMask: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__cardMask.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__cardMask = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var commissionAmount: Double {
    @inline(__always)
    get {
      return self.__commissionAmount
    }
    @inline(__always)
    set {
      self.__commissionAmount = newValue
    }
  }
  
  var receiptUrl: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__receiptUrl.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__receiptUrl = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var contractNumber: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__contractNumber.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__contractNumber = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var payDate: Double? {
    @inline(__always)
    get {
      return self.__payDate.value
    }
    @inline(__always)
    set {
      self.__payDate = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var payeeName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__payeeName.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__payeeName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var token: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__token.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__token = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
