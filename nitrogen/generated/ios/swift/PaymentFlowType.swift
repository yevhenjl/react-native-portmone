///
/// PaymentFlowType.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PaymentFlowType`, backed by a C++ struct.
 */
public typealias PaymentFlowType = margelo.nitro.hfportmone.PaymentFlowType

public extension PaymentFlowType {
  private typealias bridge = margelo.nitro.hfportmone.bridge.swift

  /**
   * Create a new instance of `PaymentFlowType`.
   */
  init(payWithCard: Bool?, payWithAppleGPay: Bool?, withoutCVV: Bool?) {
    self.init({ () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = payWithCard {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = payWithAppleGPay {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = withoutCVV {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var payWithCard: Bool? {
    @inline(__always)
    get {
      return self.__payWithCard.value
    }
    @inline(__always)
    set {
      self.__payWithCard = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var payWithAppleGPay: Bool? {
    @inline(__always)
    get {
      return self.__payWithAppleGPay.value
    }
    @inline(__always)
    set {
      self.__payWithAppleGPay = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var withoutCVV: Bool? {
    @inline(__always)
    get {
      return self.__withoutCVV.value
    }
    @inline(__always)
    set {
      self.__withoutCVV = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
