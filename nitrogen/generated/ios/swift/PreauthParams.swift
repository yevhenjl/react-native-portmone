///
/// PreauthParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PreauthParams`, backed by a C++ struct.
 */
public typealias PreauthParams = margelo.nitro.hfportmone.PreauthParams

public extension PreauthParams {
  private typealias bridge = margelo.nitro.hfportmone.bridge.swift

  /**
   * Create a new instance of `PreauthParams`.
   */
  init(payeeId: String, accountId: String?, description: String, billNumber: String?) {
    self.init(std.string(payeeId), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = accountId {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(description), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = billNumber {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var payeeId: String {
    @inline(__always)
    get {
      return String(self.__payeeId)
    }
    @inline(__always)
    set {
      self.__payeeId = std.string(newValue)
    }
  }
  
  var accountId: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__accountId.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__accountId = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var description: String {
    @inline(__always)
    get {
      return String(self.__description)
    }
    @inline(__always)
    set {
      self.__description = std.string(newValue)
    }
  }
  
  var billNumber: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__billNumber.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__billNumber = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
