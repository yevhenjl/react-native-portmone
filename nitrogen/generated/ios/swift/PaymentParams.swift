///
/// PaymentParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PaymentParams`, backed by a C++ struct.
 */
public typealias PaymentParams = margelo.nitro.hfportmone.PaymentParams

public extension PaymentParams {
  private typealias bridge = margelo.nitro.hfportmone.bridge.swift

  /**
   * Create a new instance of `PaymentParams`.
   */
  init(description: String?, attribute1: String?, attribute2: String?, attribute3: String?, attribute4: String?, attribute5: String?, billNumber: String?, preauthFlag: Bool?, billCurrency: String?, billAmount: Double, billAmountWcvv: Double?, payeeId: String, type: String?, merchantIdentifier: String?, paymentFlowType: PaymentFlowType?) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = description {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = attribute1 {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = attribute2 {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = attribute3 {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = attribute4 {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = attribute5 {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = billNumber {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = preauthFlag {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = billCurrency {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), billAmount, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = billAmountWcvv {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), std.string(payeeId), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = type {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = merchantIdentifier {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_PaymentFlowType_ in
      if let __unwrappedValue = paymentFlowType {
        return bridge.create_std__optional_PaymentFlowType_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var description: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__description.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__description = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var attribute1: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__attribute1.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__attribute1 = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var attribute2: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__attribute2.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__attribute2 = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var attribute3: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__attribute3.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__attribute3 = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var attribute4: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__attribute4.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__attribute4 = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var attribute5: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__attribute5.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__attribute5 = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var billNumber: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__billNumber.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__billNumber = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var preauthFlag: Bool? {
    @inline(__always)
    get {
      return self.__preauthFlag.value
    }
    @inline(__always)
    set {
      self.__preauthFlag = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var billCurrency: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__billCurrency.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__billCurrency = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var billAmount: Double {
    @inline(__always)
    get {
      return self.__billAmount
    }
    @inline(__always)
    set {
      self.__billAmount = newValue
    }
  }
  
  var billAmountWcvv: Double? {
    @inline(__always)
    get {
      return self.__billAmountWcvv.value
    }
    @inline(__always)
    set {
      self.__billAmountWcvv = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var payeeId: String {
    @inline(__always)
    get {
      return String(self.__payeeId)
    }
    @inline(__always)
    set {
      self.__payeeId = std.string(newValue)
    }
  }
  
  var type: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__type.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__type = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var merchantIdentifier: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__merchantIdentifier.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__merchantIdentifier = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var paymentFlowType: PaymentFlowType? {
    @inline(__always)
    get {
      return { () -> PaymentFlowType? in
        if let __unwrapped = self.__paymentFlowType.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__paymentFlowType = { () -> bridge.std__optional_PaymentFlowType_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_PaymentFlowType_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
