///
/// NitroHfPortmone-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridHfPortmoneSpec` to properly resolve imports.
namespace margelo::nitro::hfportmone { class HybridHfPortmoneSpec; }
// Forward declaration of `Language` to properly resolve imports.
namespace margelo::nitro::hfportmone { enum class Language; }
// Forward declaration of `PaymentFlowType` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentFlowType; }
// Forward declaration of `PaymentResult` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct PaymentResult; }
// Forward declaration of `StyleOptions` to properly resolve imports.
namespace margelo::nitro::hfportmone { struct StyleOptions; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridHfPortmoneSpec_cxx` to properly resolve imports.
namespace NitroHfPortmone { class HybridHfPortmoneSpec_cxx; }

// Include C++ defined types
#include "HybridHfPortmoneSpec.hpp"
#include "Language.hpp"
#include "PaymentFlowType.hpp"
#include "PaymentResult.hpp"
#include "StyleOptions.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::hfportmone::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::optional<StyleOptions>
  /**
   * Specialized version of `std::optional<StyleOptions>`.
   */
  using std__optional_StyleOptions_ = std::optional<StyleOptions>;
  inline std::optional<StyleOptions> create_std__optional_StyleOptions_(const StyleOptions& value) {
    return std::optional<StyleOptions>(value);
  }
  
  // pragma MARK: std::optional<Language>
  /**
   * Specialized version of `std::optional<Language>`.
   */
  using std__optional_Language_ = std::optional<Language>;
  inline std::optional<Language> create_std__optional_Language_(const Language& value) {
    return std::optional<Language>(value);
  }
  
  // pragma MARK: std::shared_ptr<Promise<PaymentResult>>
  /**
   * Specialized version of `std::shared_ptr<Promise<PaymentResult>>`.
   */
  using std__shared_ptr_Promise_PaymentResult__ = std::shared_ptr<Promise<PaymentResult>>;
  inline std::shared_ptr<Promise<PaymentResult>> create_std__shared_ptr_Promise_PaymentResult__() {
    return Promise<PaymentResult>::create();
  }
  inline PromiseHolder<PaymentResult> wrap_std__shared_ptr_Promise_PaymentResult__(std::shared_ptr<Promise<PaymentResult>> promise) {
    return PromiseHolder<PaymentResult>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const PaymentResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const PaymentResult&)>`.
   */
  using Func_void_PaymentResult = std::function<void(const PaymentResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const PaymentResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_PaymentResult_Wrapper final {
  public:
    explicit Func_void_PaymentResult_Wrapper(std::function<void(const PaymentResult& /* result */)>&& func): _function(std::make_shared<std::function<void(const PaymentResult& /* result */)>>(std::move(func))) {}
    inline void call(PaymentResult result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const PaymentResult& /* result */)>> _function;
  };
  Func_void_PaymentResult create_Func_void_PaymentResult(void* _Nonnull swiftClosureWrapper);
  inline Func_void_PaymentResult_Wrapper wrap_Func_void_PaymentResult(Func_void_PaymentResult value) {
    return Func_void_PaymentResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::optional<PaymentFlowType>
  /**
   * Specialized version of `std::optional<PaymentFlowType>`.
   */
  using std__optional_PaymentFlowType_ = std::optional<PaymentFlowType>;
  inline std::optional<PaymentFlowType> create_std__optional_PaymentFlowType_(const PaymentFlowType& value) {
    return std::optional<PaymentFlowType>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec>`.
   */
  using std__shared_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_ = std::shared_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec>;
  std::shared_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec> create_std__shared_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_(std__shared_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec>
  using std__weak_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_ = std::weak_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec>;
  inline std__weak_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_ weakify_std__shared_ptr_margelo__nitro__hfportmone__HybridHfPortmoneSpec_(const std::shared_ptr<margelo::nitro::hfportmone::HybridHfPortmoneSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<PaymentResult>>>
  using Result_std__shared_ptr_Promise_PaymentResult___ = Result<std::shared_ptr<Promise<PaymentResult>>>;
  inline Result_std__shared_ptr_Promise_PaymentResult___ create_Result_std__shared_ptr_Promise_PaymentResult___(const std::shared_ptr<Promise<PaymentResult>>& value) {
    return Result<std::shared_ptr<Promise<PaymentResult>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_PaymentResult___ create_Result_std__shared_ptr_Promise_PaymentResult___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<PaymentResult>>>::withError(error);
  }

} // namespace margelo::nitro::hfportmone::bridge::swift
